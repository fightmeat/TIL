
```python

import sqlite3
import random

DB_FILE = "vocabulary.db"

def create_table():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS words
                 (word text PRIMARY KEY, meaning text)''')
    conn.commit()
    conn.close()

def add_word():
    word = input("추가할 단어를 입력하세요: ")
    meaning = input(f"{word}의 뜻을 입력하세요: ")
    word = word.lower()

    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()

    try:
        c.execute("INSERT INTO words VALUES (?, ?)", (word, meaning))
        conn.commit()
        print(f"'{word}' 단어가 추가되었습니다.")
    except sqlite3.IntegrityError:
        print(f"'{word}' 단어가 이미 존재합니다.")

    conn.close()

def delete_word():
    word = input("삭제할 단어를 입력하세요: ")
    meaning = input(f"{word}의 뜻을 삭제하려면 뜻을 입력하세요 (전체 삭제는 그냥 Enter): ")

    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()

    if meaning:
        c.execute("DELETE FROM words WHERE word=? AND meaning=?", (word, meaning))
    else:
        c.execute("DELETE FROM words WHERE word=?", (word,))

    if c.rowcount > 0:
        print(f"'{word}' 단어가 삭제되었습니다.")
    else:
        print(f"'{word}' 단어가 단어장에 없습니다.")

    conn.commit()
    conn.close()

def search_language():
    language = input("검색할 단어나 뜻을 입력하세요: ")
    results = {}

    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT word, meaning FROM words")
    rows = c.fetchall()
    conn.close()

    for row in rows:
        word, meaning = row
        if language == word or language in meaning:
            results[word] = [meaning]
    print(results)

def list_language():
    zero = 0

    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT word, meaning FROM words")
    rows = c.fetchall()
    conn.close()

    while True:
        if zero < len(rows):
            print(rows[zero:zero+10])
            choice = input("\n10개 더? (y/n) : ")
            choice = choice.lower()
            if choice == 'y':
                zero += 10
            else:
                break
        else:
            print("더 이상 단어가 없습니다.")
            break

def random_test():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT word, meaning FROM words")
    rows = c.fetchall()
    conn.close()

    if not rows:
        print("테스트할 단어가 없습니다. 먼저 단어를 추가해주세요.")
        return

    word, meaning = random.choice(rows)

    if random.choice([True, False]):
        print(f"'{word}'의 뜻은 무엇인가요?")
        answer = input("뜻을 입력하세요 (메뉴로 돌아가려면 'exit' 입력, 여러 답을 입력할 때는 쉼표로 구분): ")
        if answer == "exit":
            return
        answer_list = [_.lower() for _ in answer.split(',')]
        if set(answer_list).issubset(set(meaning.split(','))):
            print("정답입니다!")
        else:
            print(f"틀렸습니다. '{word}'의 뜻은 '{meaning}' 입니다.")
    else:
        selected_meaning = random.choice(meaning.split(','))
        print(f"이 뜻을 가진 단어는 무엇인가요? : {selected_meaning}")
        answer = input("단어를 입력하세요 (메뉴로 돌아가려면 'exit' 입력): ").lower()
        if answer == "exit":
            return
        if answer == word:
            print("정답입니다!")
        else:
            print(f"틀렸습니다. 정답은 '{word}' 입니다.")

def load_vocabulary():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT word, meaning FROM words")
    rows = c.fetchall()
    conn.close()
    return {row[0]: [row[1]] for row in rows}

def main():
    create_table()
    while True:
        print("\n영어 단어장 프로그램\n")
        print("1. 단어 추가")
        print("2. 단어 삭제")
        print("3. 단어 검색")
        print("4. 전체 단어 보기")
        print("5. 단어 랜덤 테스트")
        print("6. 종료")
        
        choice = input("원하시는 기능의 번호를 입력하세요: ")
        if choice == "1":
            add_word()
        elif choice == "2":
            delete_word()
        elif choice == "3":
            search_language()
        elif choice == "4":
            list_language()
        elif choice == "5":
            random_test()
        elif choice == "6":
            print("프로그램을 종료합니다.")
            break
        else:
            print("잘못된 입력입니다. 다시 선택해주세요.")

if __name__ == "__main__":
    main()
```
